#!/usr/bin/env python3
"""
Plotting utilities for the MR‑assistant experiment (Results chapter)
====================================================================
This script expands the minimal confirmatory analysis (**score_RQ.py**) by
producing descriptive and inferential graphics ready to be embedded in
Chapter "Risultati" of the thesis.

‼️ **Consistency fix (2025‑07‑10)**: all plots now enforce the order
**EMO → NEU** for group comparison, so colours and x‑axis positions are
uniform across box/swarm, bar‑CI, and other figures.

Prerequisites
-------------
Run **score_RQ.py** first. It must generate two artefacts in the working
folder:

1. ``post_scored.csv``          – post‑task questionnaire merged with objective
                              metrics and all derived scores.
2. ``stats_summary_RQ.csv`` – summary table with effect sizes & tests.

Outputs
-------
Plots are saved in a dedicated ``figs`` directory (created if absent):

* ``box_<var>.png``        – box  +  swarm descriptive plot
* ``bar_<var>.png``        – mean  ±  95 %  CI with *p*‑value annotation
* ``forest_effectsize.png`` – forest plot of all effect sizes (d  or  δ)
* ``scatter_TCT_*.png`` – exploratory scatter plots (objective  ×  subjective)

Author: Matteo  Ercolino – 2025‑07‑10
"""

# ---------------------------------------------------------------------------
# 0.  Imports &  setup
# ---------------------------------------------------------------------------
import pathlib, warnings
from typing import Tuple

import numpy as np
import pandas as pd
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt

warnings.filterwarnings("ignore", category=FutureWarning)

plt.rcParams.update({
    "figure.dpi": 300,
    "font.size": 10,
    "axes.titlesize": 12,
    "axes.labelsize": 10,
    "axes.titleweight": "semibold",
    "figure.constrained_layout.use": True,
})

# Unified aesthetics
sns.set_theme(style="whitegrid", palette="colorblind", rc={"legend.frameon": False})

FIG_DIR = pathlib.Path("figs")
FIG_DIR.mkdir(exist_ok=True)

VARLIST = [
    "PQ",
    "NASA_TLX",
    "SSQ_Total_Δ",
    "SUS",
    "SASSI_global",
    "TCT",
    "Turns",
]

GROUP_ORDER = ["EMO", "NEU"]  # ← ordine coerente ovunque

# ---------------------------------------------------------------------------
# 1.  Load data generated by score_RQ.py
# ---------------------------------------------------------------------------
POST_CSV    = "post_scored.csv"
SUMMARY_CSV = "stats_summary_RQ.csv"

if not pathlib.Path(POST_CSV).exists():
    raise FileNotFoundError(f"{POST_CSV} non trovato. Esegui prima score_RQ.py.")

post = pd.read_csv(POST_CSV)
res  = pd.read_csv(SUMMARY_CSV)

# Enforce categorical ordering – utilissimo per Seaborn/Matplotlib
post["GROUP"] = pd.Categorical(post["GROUP"], categories=GROUP_ORDER, ordered=True)
assert list(post.GROUP.cat.categories) == GROUP_ORDER, "Ordering categorical failed"

# ---------------------------------------------------------------------------
# 2. Helper – bootstrap CI e funzioni di drawing
# ---------------------------------------------------------------------------

def bootstrap_ci(a: np.ndarray, n_boot: int = 5_000, ci: float = 0.95) -> Tuple[float, float]:
    rng = np.random.default_rng(seed=42)
    boots = rng.choice(a, (n_boot, len(a)), replace=True).mean(axis=1)
    low, high = np.percentile(boots, [(1 - ci) / 2 * 100, (1 + ci) / 2 * 100])
    return low, high


def draw_box_swarm(var: str):
    fig, ax = plt.subplots(figsize=(3.3, 3.8))

    sns.boxplot(x="GROUP", y=var, data=post, ax=ax, whis=1.5, fliersize=0.0,
                order=GROUP_ORDER)  # ← ordine fissato

    sns.swarmplot(x="GROUP", y=var, data=post, ax=ax, size=3, linewidth=0.5,
                  palette="dark:.3", zorder=10, order=GROUP_ORDER)

    ax.set_title(var)
    fig.savefig(FIG_DIR / f"box_{var}.png", dpi=300)
    plt.close(fig)


def draw_bar_ci(var: str, pval: float | None):
    fig, ax = plt.subplots(figsize=(3.3, 3.8))

    means, cis = [], []
    for grp in GROUP_ORDER:  # already EMO → NEU
        a = post.loc[post.GROUP == grp, var].dropna().to_numpy()
        means.append(a.mean())
        cis.append(bootstrap_ci(a))

    ax.bar(range(len(GROUP_ORDER)), means,
           yerr=[[m - ci[0] for m, ci in zip(means, cis)],
                 [ci[1] - m for m, ci in zip(means, cis)]],
           capsize=6, color=sns.color_palette()[:2])

    ax.set_xticks(range(len(GROUP_ORDER)), GROUP_ORDER)
    ax.set_ylabel(var)

    if pval is not None and not pd.isna(pval):
        ax.text(0.5, max(means) * 1.05, f"p = {pval:.3f}", ha="center", va="bottom", fontsize=9)

    ax.set_title(f"{var} – media ±  95% CI")
    fig.savefig(FIG_DIR / f"bar_{var}.png", dpi=300)
    plt.close(fig)

# ---------------------------------------------------------------------------
# 3. Genera plot descrittivi per ogni variabile
# ---------------------------------------------------------------------------
print("➜ Generating per‑variable descriptive plots …")
for var in VARLIST:
    draw_box_swarm(var)
    pval = res.loc[res["var"] == var, "p"].squeeze() if var in res["var"].values else None
    draw_bar_ci(var, pval)

# ---------------------------------------------------------------------------
# 4. Forest plot con effect size (coerente con ordine)
# ---------------------------------------------------------------------------
print("➜ Building effect‑size forest plot …")

_eff = (res.set_index("var")
        .reindex(VARLIST)
        .reset_index()[["var", "effsize"]]
        .dropna())

if not _eff.empty:
    y_pos = np.arange(len(_eff))[::-1]  # top‑down

    fig, ax = plt.subplots(figsize=(4.5, 3.6))
    ax.axvline(0, ls="--", lw=0.8, color="grey")
    ax.scatter(_eff["effsize"], y_pos, s=35, color="black")

    ax.set_yticks(y_pos, _eff["var"])
    ax.set_xlabel("Effect size (Cohen d / Cliff δ)")
    ax.set_title("Differenze EMO – NEU")

    fig.savefig(FIG_DIR / "forest_effectsize.png", dpi=300)
    plt.close(fig)
else:
    print("⚠ Nessun effect size disponibile per il forest plot – controlla stats_summary_RQ.csv")

# ---------------------------------------------------------------------------
# 5. Scatter esplorativi (objective × subjective)
# ---------------------------------------------------------------------------
print("➜ Creating exploratory scatter plots …")
OBJ = ["TCT", "Turns"]
SUBJ = ["PQ", "NASA_TLX", "SUS"]
for x in OBJ:
    for y in SUBJ:
        fig, ax = plt.subplots(figsize=(3.6, 3.3))
        sns.regplot(x=x, y=y, data=post, scatter_kws=dict(s=30, alpha=.8),
                    line_kws=dict(ls="--", lw=1.1), ax=ax)
        sns.scatterplot(x=x, y=y, hue="GROUP", data=post, ax=ax, legend=False,
                        palette="colorblind", s=35, hue_order=GROUP_ORDER)
        ax.set_title(f"{y} vs {x}")
        fig.savefig(FIG_DIR / f"scatter_{x}_{y}.png", dpi=300)
        plt.close(fig)

print("✓ Tutte le figure sono state salvate in ./figs. Inseriscile nel capitolo Risultati.")
